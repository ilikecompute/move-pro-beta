{"README.md":"","custom.ts":"//% weight=100 color=#0fbc11 icon=\"ïƒƒ\"\nnamespace ServoLite {\n    /*some parameters used for controlling the turn and length */\n    let MicroSecInASecond = 1000000\n    let DistancePerSec = 100\n    let NumberOfDegreesPerSec = 200\n\n    /**\n     * Allows the setting of the :MOVE mini turn speed.\n     * This allows tuning for the turn x degrees commands\n     * @param DegPerSec : How many degrees per second the mini does.\n     */\n    //% block=\"setup turn speed %DegPerSec\" \n    export function SetDegreesPerSecond(DegPerSec: number): void {\n        NumberOfDegreesPerSec = DegPerSec\n    }\n\n    /**\n     * Allows the setting of the :MOVE mini forward / reverse speed.\n     * This allows tuning for the move x distance commands\n     * @param DegPerSec : How many degrees per second the mini does.\n     */\n    //% block=\"setup speed %DistPerSec\"\n    export function SetDistancePerSecond(DistPerSec: number): void {\n        NumberOfDegreesPerSec = DistPerSec\n    }\n    /**\n     * Drives forwards. Call stop to stop\n     * @param none\n     */\n    //%blockId=servos_forward\n    //% block=\"drive forward\" \n    export function forward(): void {\n        pins.servoWritePin(AnalogPin.P1, 0);\n        pins.servoWritePin(AnalogPin.P2, 180);\n    }\n\n    /**\n     * Drives backwards. Call stop to stop\n     * @param none\n     */\n    //%blockId=servos_backward\n    //% block=\"drive backward\" \n    export function backward(): void {\n        pins.servoWritePin(AnalogPin.P1, 180);\n        pins.servoWritePin(AnalogPin.P2, 0);\n    }\n\n    /**\n * Turns left. Call stop to stop\n * @param none\n */\n    //%blockId=servos_left\n    //% block=\"turn left\" \n    export function left(): void {\n        pins.servoWritePin(AnalogPin.P1, 0);\n        pins.servoWritePin(AnalogPin.P2, 0);\n    }\n\n    /**\n * Turns right. Call stop to stop\n * @param none\n */\n    //%blockId=servos_right\n    //% block=\"turn right\" \n    export function right(): void {\n        pins.servoWritePin(AnalogPin.P1, 180);\n        pins.servoWritePin(AnalogPin.P2, 180);\n    }\n\n\t/**\n\t * Stop for 360 servos. \n\t * rather than write 90, which may not stop the servo moving if it is out of trim\n\t * this stops sending servo pulses, which has the same effect.\n\t * On a normal servo this will stop the servo where it is, rather than return it to neutral position.\n\t * It will also not provide any holding force.\n     * @param none\n     */\n    //%blockId=servos_stop\n    //% block=\"stop\" \n    export function stop(): void {\n        pins.analogWritePin(AnalogPin.P1, 0);\n        pins.analogWritePin(AnalogPin.P2, 0);\n    }\n\n\t/**\n\t * Sends servos to 'neutral' position. \n\t * On a well trimmed 360 this is stationary, on a normal servo this is 90 degrees.\n     * @param none\n     */\n    //% blockId=servos_neutral\n    //% block=\"goto neutral position\" \n    export function neutral(): void {\n        pins.servoWritePin(AnalogPin.P1, 90);\n        pins.servoWritePin(AnalogPin.P2, 90);\n    }\n\n    /**\n     * Drives forwards the requested distance and then stops\n     * @param howFar distance to move\n     */\n    //% blockId=drive_forwards\n    //% block=\"drive forwards %howFar distance\" \n    export function DriveForwards(howFar: number): void {\n        let timeToWait = (howFar * MicroSecInASecond) / DistancePerSec;\n        forward();\n        control.waitMicros(timeToWait);\n        stop();\n    }\n\n    /**\n     * Drives backwards the requested distance and then stops\n     * @param howFar distance to move\n     */\n    //% blockId=drive_backwards\n    //% block=\"drive backwards %howFar distance\" \n    export function DriveBackwards(distance: number): void {\n        let timeToWait = (distance * MicroSecInASecond) / DistancePerSec;\n        backward();\n        control.waitMicros(timeToWait);\n        stop();\n    }\n\n    /**\n     * Turns right through the requested degrees and then stops\n     * needs NumberOfDegreesPerSec tuned to make accurate, as it uses\n     * a simple turn, wait, stop method.\n     * Runs the servos at slower than the right function to reduce wheel slip\n     * @param deg :how far to turn\n     */\n    //% blockId=turn_right\n    //% block = \"turn right number %deg degrees\"\n    export function TurnRight(deg: number): void {\n        let timeToWait = (deg * MicroSecInASecond) / NumberOfDegreesPerSec;\n        pins.servoWritePin(AnalogPin.P1, 130);\n        pins.servoWritePin(AnalogPin.P2, 130);\n        control.waitMicros(timeToWait);\n        pins.servoWritePin(AnalogPin.P1, 90);\n        pins.servoWritePin(AnalogPin.P2, 90);\n    }\n\n    /**\n    * Turns left through the requested degrees and then stops\n    * needs NumberOfDegreesPerSec tuned to make accurate, as it uses\n    * a simple turn, wait, stop method.\n    * Runs the servos at slower than the right function to reduce wheel slip\n    * @param deg :how far to turn\n    */\n    //% blockId=turn_left\n    //%block = \"turn left number %deg degrees\"\n    export function TurnLeft(deg: number): void {\n        let timeToWait = (deg * MicroSecInASecond) / NumberOfDegreesPerSec;\n        pins.servoWritePin(AnalogPin.P1, 50);\n        pins.servoWritePin(AnalogPin.P2, 50);\n        control.waitMicros(timeToWait);\n        pins.servoWritePin(AnalogPin.P1, 90);\n        pins.servoWritePin(AnalogPin.P2, 90);\n\n    }\n}","main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"bluetooth_on_disconnected\" x=\"497\" y=\"-37\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        # # . # # \n        # # . # # \n        . . # . . \n        . # # # . \n        # . . . #\n        `</field><next><block type=\"servos_stop\"><next><block type=\"SoundExpression_playUntilDone\"><field name=\"this\">soundExpression.sad</field></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . .\n        `</field></block></statement></block><block type=\"bluetooth_on_connected\" x=\"250\" y=\"17\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        # # . # # \n        # # . # # \n        . . # . . \n        # . . . # \n        . # # # .\n        `</field><next><block type=\"SoundExpression_playUntilDone\"><field name=\"this\">soundExpression.happy</field></block></next></block></statement></block><block type=\"control_on_event\" x=\"867\" y=\"0\"><value name=\"src\"><shadow type=\"control_event_source_id\"><field name=\"id\">EventBusSource.MES_DPAD_CONTROLLER_ID</field></shadow></value><value name=\"value\"><shadow type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MICROBIT_EVT_ANY</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"7\"/><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_A_DOWN</field></block></value></block></value><statement name=\"DO0\"><block type=\"servos_forward\"/></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_A_UP</field></block></value></block></value><statement name=\"DO1\"><block type=\"servos_stop\"/></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_B_DOWN</field></block></value></block></value><statement name=\"DO2\"><block type=\"servos_backward\"/></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_B_UP</field></block></value></block></value><statement name=\"DO3\"><block type=\"servos_stop\"/></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_C_DOWN</field></block></value></block></value><statement name=\"DO4\"><block type=\"servos_left\"/></statement><value name=\"IF5\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_C_UP</field></block></value></block></value><statement name=\"DO5\"><block type=\"servos_stop\"/></statement><value name=\"IF6\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_D_DOWN</field></block></value></block></value><statement name=\"DO6\"><block type=\"servos_right\"/></statement><value name=\"IF7\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value&quot;\"/></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MES_DPAD_BUTTON_D_UP</field></block></value></block></value><statement name=\"DO7\"><block type=\"servos_stop\"/></statement></block></statement></block><block type=\"device_button_event\" x=\"1624\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . # . # . \n        . . . . . \n        # . . . # \n        . # # # .\n        `</field><next><block type=\"device_set_servo_pin\"><field name=\"name\">AnalogPin.P2</field><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"180\" label=\"Number\" precision=\"0\"/><field name=\"SLIDER\">180</field></shadow></value><next><block type=\"device_set_servo_pin\"><field name=\"name\">AnalogPin.P0</field><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"180\" label=\"Number\" precision=\"0\"/><field name=\"SLIDER\">0</field></shadow></value></block></next></block></next></block></statement></block><block type=\"device_gesture_event\" x=\"1820\" y=\"51\"><field name=\"NAME\">Gesture.Shake</field></block><block type=\"input_logo_event\" x=\"1994\" y=\"350\"><field name=\"action\">TouchButtonEvent.Touched</field></block><block type=\"device_button_event\" x=\"0\" y=\"989\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"kitronik_servolite_servos_stop\"/></statement></block><block type=\"device_button_event\" x=\"280\" y=\"989\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . # . # . \n        . . . . . \n        . # # # . \n        # . . . #\n        `</field></block></statement></block><block type=\"input_logo_event\" x=\"1119\" y=\"989\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . # . # . \n        . . . . . \n        # # # # # \n        . . . . .\n        `</field></block></statement></block></xml>","main.py":"def on_bluetooth_connected():\n    basic.show_leds(\"\"\"\n        # # . # #\n                # # . # #\n                . . # . .\n                # . . . #\n                . # # # .\n    \"\"\")\nbluetooth.on_bluetooth_connected(on_bluetooth_connected)\n\ndef on_bluetooth_disconnected():\n    basic.show_leds(\"\"\"\n        # # . # #\n                # # . # #\n                . . # . .\n                . # # # .\n                # . . . #\n    \"\"\")\n    ServoLite.stop()\nbluetooth.on_bluetooth_disconnected(on_bluetooth_disconnected)\n\ndef on_mes_dpad_controller_id_microbit_evt():\n    if control.event_value() == EventBusValue.MES_DPAD_BUTTON_A_DOWN:\n        ServoLite.forward()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_A_UP:\n        ServoLite.stop()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_B_DOWN:\n        ServoLite.backward()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_B_UP:\n        ServoLite.stop()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_C_DOWN:\n        ServoLite.left()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_C_UP:\n        ServoLite.stop()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_D_DOWN:\n        ServoLite.right()\n    elif control.event_value() == EventBusValue.MES_DPAD_BUTTON_D_UP:\n        ServoLite.stop()\ncontrol.on_event(EventBusSource.MES_DPAD_CONTROLLER_ID,\n    EventBusValue.MICROBIT_EVT_ANY,\n    on_mes_dpad_controller_id_microbit_evt)\n","main.ts":"bluetooth.onBluetoothConnected(function () {\n    basic.showLeds(`\n        # # . # #\n        # # . # #\n        . . # . .\n        # . . . #\n        . # # # .\n        `)\n    soundExpression.happy.playUntilDone()\n})\nbluetooth.onBluetoothDisconnected(function () {\n    basic.showLeds(`\n        # # . # #\n        # # . # #\n        . . # . .\n        . # # # .\n        # . . . #\n        `)\n    ServoLite.stop()\n    soundExpression.sad.playUntilDone()\n})\ninput.onButtonPressed(Button.A, function () {\n    basic.showLeds(`\n        . . . . .\n        . # . # .\n        . . . . .\n        # . . . #\n        . # # # .\n        `)\n    pins.servoWritePin(AnalogPin.P2, 180)\n    pins.servoWritePin(AnalogPin.P0, 0)\n})\ninput.onButtonPressed(Button.AB, function () {\n    kitronik_servo_lite.stop()\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showLeds(`\n        . . . . .\n        . # . # .\n        . . . . .\n        . # # # .\n        # . . . #\n        `)\n})\ninput.onGesture(Gesture.Shake, function () {\n\t\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n\t\n})\ncontrol.onEvent(EventBusSource.MES_DPAD_CONTROLLER_ID, EventBusValue.MICROBIT_EVT_ANY, function () {\n    if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_A_DOWN) {\n        ServoLite.forward()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_A_UP) {\n        ServoLite.stop()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_B_DOWN) {\n        ServoLite.backward()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_B_UP) {\n        ServoLite.stop()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_C_DOWN) {\n        ServoLite.left()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_C_UP) {\n        ServoLite.stop()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_D_DOWN) {\n        ServoLite.right()\n    } else if (control.eventValue() == EventBusValue.MES_DPAD_BUTTON_D_UP) {\n        ServoLite.stop()\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    basic.showLeds(`\n        . . . . .\n        . # . # .\n        . . . . .\n        # # # # #\n        . . . . .\n        `)\n})\nbasic.showLeds(`\n    . . . . .\n    . . . . .\n    . . . . .\n    . . . . .\n    . . . . .\n    `)\n","pxt.json":"{\n    \"name\": \"move:mini Bluetooth\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"bluetooth\": \"*\",\n        \"pxt-kitronik-motor-driver\": \"github:kitronikltd/pxt-kitronik-motor-driver#v0.0.3\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-servo-lite\": \"github:kitronikltd/pxt-kitronik-servo-lite#v1.0.5\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v1.2.7\",\n        \"tag\": \"v1.2.7\",\n        \"commits\": \"https://github.com/Microsoft/pxt-microbit/commits/2aa8d0cec64fe20cfb15cb20318f12dcd8b66755\",\n        \"target\": \"1.2.7\",\n        \"pxt\": \"4.4.5\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}